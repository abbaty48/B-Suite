import { app, protocol, BrowserWindow } from 'electron';
/* 
    IPCS INVOKES 
    1. themeMode.ts
    2. windowIPC.ts
  */
import './ipcs/themeModeIPC';
import './ipcs/windowIPC';
import './libs/crash-reporter';
import { corsHandler } from './libs/cors-handler';

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

export let mainWindow: BrowserWindow;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    frame: false,
    show: false,
    center: true,
    minHeight: 600,
    minWidth: 1100,
    fullscreen: true,
    thickFrame: false,
    transparent: true,
    webPreferences: {
      contextIsolation: true,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });
  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  // show the mainWindow when the its ready-to-show
  mainWindow.on('ready-to-show', () => mainWindow.show());
  //
  mainWindow.maximize();
  mainWindow.focus();
  // corsHandler
  corsHandler(mainWindow);
};

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', async () => {
  // create a custom protocol for local file upload/select
  protocol.registerFileProtocol('bSuite', (request, callback) => {
    const url = request.url.replace('bSuite://getMediaFile/', '');
    try {
      return callback(url);
    } catch (error) {
      return callback('404');
    }
  });
  app.setAsDefaultProtocolClient('bSuite');
  // create the main window
  // This method will be called when Electron has finished
  // initialization and is ready to create browser windows.
  // Some APIs can only be used after this event occurs.
  createWindow();
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
